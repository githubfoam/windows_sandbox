---
sudo: required
dist: bionic

notifications:
  slack:
    on_failure: always


fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt


matrix:
  fast_finish: true
  include:

    - name: "powershell scripts Python 3.8 on Windows"
      os: windows
      language: shell
      env:
        - PATH=/c/Python38:/c/Python38/Scripts:$PATH
      before_install:
        - choco install python
        - python --version
        # - pip install -r requirements.txt
      script:
        - whoami   #travis
        - powershell write-host "Hello World"
        - PS write-host "Hello World"
        # - powershell FirstScript.ps1
        # - powershell C:\bin> .\FirstScript.ps1 #The command "powershell C:\bin> .\FirstScript.ps1" exited with 1.
        - PS C:\bin> .\FirstScript.ps1
        - PS C:\bin> .\FirstScript_1.ps1
        # - powershell module-import .\EventForUser.ps1; EventForUser -TargetUser "travis"      
      # after_success:
        # - deactivate #deactivate: command not found

    - name: "powershell scripts on focal 20.04"    
      os: 
      - linux
      dist: focal 
      addons:
              apt:
                sources:
                  - sourceline: deb [arch=amd64] https://packages.microsoft.com/ubuntu/20.04/prod focal main
                    key_url: https://packages.microsoft.com/keys/microsoft.asc
                packages:
                  - powershell      
      before_install:
        # - powershell write-host "Hello World" #powershell: command not found
        - PS write-host "Hello World"
        - pwsh -c 'Install-Module Pester -Force -Scope CurrentUser; .\DoTests.ps1'
        - pwsh -f "${env:TRAVIS_BUILD_DIR}/DoTests.ps1"

    - name: "powershell scripts on bionic 18.04"    
      os: linux
      dist: bionic 
      addons:
              apt:
                sources:
                  - sourceline: deb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main
                    key_url: https://packages.microsoft.com/keys/microsoft.asc
                packages:
                  - powershell      
      before_install:
        # - powershell write-host "Hello World" #powershell: command not found
        # - pwsh write-host "Hello World" #The argument 'write-host' is not recognized as the name of a script file.
        - PS write-host "Hello World"
        - pwsh -c 'Install-Module Pester -Force -Scope CurrentUser; .\DoTests.ps1'
        - pwsh -f "${env:TRAVIS_BUILD_DIR}/DoTests.ps1"

    - name: "powershell scripts on trusty 14.04"    
      os: 
      - linux
      dist: trusty
      addons:
              apt:
                sources:
                  - sourceline: deb [arch=amd64] https://packages.microsoft.com/ubuntu/14.04/prod trusty main
                    key_url: https://packages.microsoft.com/keys/microsoft.asc
                packages:
                  - powershell      
      before_install:
        # - powershell write-host "Hello World" #powershell: command not found
        - PS write-host "Hello World"
        - pwsh -c 'Install-Module Pester -Force -Scope CurrentUser; .\DoTests.ps1'
        - pwsh -f "${env:TRAVIS_BUILD_DIR}/DoTests.ps1"

    - name: "powershell scripts on macos xcode12.2"    
      os: 
      - osx
      osx_image: 
      - xcode12.2 #macOS 10.15.7
      before_install:
        - brew update
        - brew tap caskroom/cask
        - brew cask install powershell
        - powershell write-host "Hello World"

# https://mobsf.github.io/docs/#/installation?id=windows
    - name: "deploy Mobile Security Framework (MobSF) Python 3.8 on Windows"
      os: 
      - windows
      language: shell
      env:
        - PATH=/c/Python38:/c/Python38/Scripts:$PATH
      before_install:
        - choco install python
        - python --version
        # - pip install -r requirements.txt
      script:
        - choco install git
        - git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git
        - cd Mobile-Security-Framework-MobSF
        - dir
        # - setup.bat         
      # after_success:
        # - deactivate #deactivate: command not found

    # - name: "deploy Grafana InfluxDB    Python 3.8 on Windows"
    #   os: windows
    #   language: shell
    #   env:
    #     - PATH=/c/Python38:/c/Python38/Scripts:$PATH
    #   before_install:
    #     - choco install python
    #     # The command "pip install virtualenv" failed and exited with 127 during 
    #     # - pip install virtualenv
    #     # - virtualenv $HOME/venv
    #     # - source $HOME/venv/Scripts/activate
    #     - python --version
    #     # - pip install -r requirements.txt
    #   script:
    #     - choco install kubernetes-helm
    #     - sudo helm repo add stable https://kubernetes-charts.storage.googleapis.com/
    #     - sudo helm install stable/influxdb --name-template influxdb
    #     - sudo helm install stable/grafana --name-template grafana         
    #     # - $version = (Invoke-RestMethod https://api.github.com/repos/argoproj/argo-cd/releases/latest).tag_name
    #     # - $url = "https://github.com/argoproj/argo-cd/releases/download/" + $version + "/argocd-windows-amd64.exe"
    #     # - $output = "argocd.exe"
    #     # - Invoke-WebRequest -Uri $url -OutFile $output
    #   after_success:
    #     - deactivate

# https://argoproj.github.io/argo-cd/cli_installation/
    # - name: "deploy argocd   Python 3.8 on Windows"
    #   os: windows
    #   language: shell
    #   env:
    #     - PATH=/c/Python38:/c/Python38/Scripts:$PATH
    #   before_install:
    #     - choco install python
    #     # The command "pip install virtualenv" failed and exited with 127 during 
    #     # - pip install virtualenv
    #     # - virtualenv $HOME/venv
    #     # - source $HOME/venv/Scripts/activate
    #     - python --version
    #     # - pip install -r requirements.txt
    #   script:
    #     - choco install wget
    #     - $version = (Invoke-RestMethod https://api.github.com/repos/argoproj/argo-cd/releases/latest).tag_name
    #     - $url = "https://github.com/argoproj/argo-cd/releases/download/" + $version + "/argocd-windows-amd64.exe"
    #     - $output = "argocd.exe"
    #     - Invoke-WebRequest -Uri $url -OutFile $output
    #   after_success:
    #     - deactivate

# # #   # =============================================windows=============================================

# #Multipass defaults to using Hyper-V as itâ€™s virtualization provider
# # https://multipass.run/docs/installing-on-windows
# #https://github.com/canonical/multipass/releases
# #https://github.com/canonical/multipass
#     - name: "multipass  Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - echo "choco install multipass" #- multipass (exited -1) - Error while running 'C:\ProgramData\chocolatey\lib\multipass\tools\chocolateyinstall.ps1'
#         - choco install wget
#         # - wget https://github.com/canonical/multipass/releases/download/v1.2.1/multipass-1.2.1+win-win64.exe
#         - dir
#       after_success:
#         - deactivate

#     - name: "Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       after_success:
#         - deactivate
    
#     - name: "Python 3.7 on Windows"
#       os: windows
#       language: shell
#       env: PATH=/c/Python37:/c/Python37/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.7.3
#         - python -m pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       after_success:
#         - deactivate