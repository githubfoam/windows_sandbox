name: "powershell CI workflow"


on:
  push:
    branches: [ test ]
  # pull_request:
  #   branches: [ githubactions_powershell ]


jobs:

  windows-latest-pwsh-scripts:
    name: "pwsh scripts - windows-latest Microsoft Windows Server 2019 Datacenter"  
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: "Install PSScriptAnalyzer module"
      shell: pwsh
      run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module PSScriptAnalyzer -ErrorAction Stop 
    - name: "Lint with PSScriptAnalyzer"
      shell: pwsh
      run: |
            Write-Host $(Join-Path -Path $(Get-Location) -ChildPath "\scripts\*.ps1")
            $workdir = $(Join-Path -Path $(Get-Location) -ChildPath "\scripts\*.ps1")
            Write-Host $workdir
            Invoke-ScriptAnalyzer -Path  $workdir -Recurse -Outvariable issues
            $errors   = $issues.Where({$_.Severity -eq 'Error'})
            $warnings = $issues.Where({$_.Severity -eq 'Warning'})
            if ($errors) {
                Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
            }                 
    - name: "silent install sysinternals" 
      run: .\scripts\Install_Sysinternals.ps1
      shell: pwsh      
    # - name: "silent install firefox" 
    #   run: .\scripts\Install_FireFox.ps1
    #   shell: pwsh           
    # - name: "test verbose" 
    #   run: .\scripts\Test_Verbose.ps1
    #   shell: pwsh    
    # - name: "windows version" 
    #   run: .\scripts\Windows_Version.ps1
    #   shell: pwsh  

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-powershell
  pester-test:
    name: "Test PowerShell on Ubuntu"
    runs-on: ubuntu-latest
    steps:
    - name: "Check out repository code"
      uses: actions/checkout@v2
    # - name: "Perform a Pester test from the command-line"
    #   shell: pwsh
    #   run: Test-Path resultsfile.log | Should -Be $true
    - name: "Perform a Pester test from the Tests.ps1 file"
      shell: pwsh
      run: |
        Invoke-Pester Unit.Tests.ps1 -Passthru

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-powershell#packaging-workflow-data-as-artifacts
  upload-pester-results:
    name: "Run Pester and upload results"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Test with Pester"
      shell: pwsh
      run: Invoke-Pester Unit.Tests.ps1 -Passthru | Export-CliXml -Path Unit.Tests.xml
    - name: "Upload test results"
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-Unit-Tests
        path: Unit.Tests.xml
    if: ${{ always() }}

  install-dependencies:
    name: "Install dependencies ubuntu latest"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install from PSGallery
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module SqlServer, PSScriptAnalyzer

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-powershell
  lint-with-PSScriptAnalyzer:
    name: "Install and run PSScriptAnalyzer ubuntu latest"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Install PSScriptAnalyzer module"
      shell: pwsh
      run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module PSScriptAnalyzer -ErrorAction Stop
    - name: "Lint with PSScriptAnalyzer"
      shell: pwsh
      run: |
            Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
            $errors   = $issues.Where({$_.Severity -eq 'Error'})
            $warnings = $issues.Where({$_.Severity -eq 'Warning'})
            if ($errors) {
                Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
            }

  windows-latest-PSScriptAnalyzer-build:
    name: "build from source - windows-latest Microsoft Windows Server 2019 Datacenter"  
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      # https://github.com/PowerShell/PSScriptAnalyzer#usage
    - name: "git clone PSScriptAnalyzer module"
      shell: pwsh
      run: |
            $PSVersionTable
            git clone https://github.com/PowerShell/PSScriptAnalyzer
            cd PSScriptAnalyzer
            \build.ps1 -PSVersion 7
            .\build.ps1 -Documentation


