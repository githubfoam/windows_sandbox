
name: "docker CI workflow"

on:
  push:
    branches: [ test ]



jobs:
         

  windows-latest:
    name: "windows-latest"  
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: "check if server is virtual"
      run: Systeminfo | findstr /i model   
    - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
      run: wmic OS get OSArchitecture     
    - name: "osfingerprinting"
      run: systeminfo | more  
    - name: "display all processes, executable path"
      run: wmic process list full         
    - name: "list of running services"
      run: tasklist         
    - name: "list of all processes along with their corresponding PID, and services that are tied to them"
      run: tasklist /svc  
    - name: "look for unusual services"
      run: net start                       
    - name: "query unusual services"
      run: sc query  
      # https://hub.docker.com/_/microsoft-windows-base-os-images
      # Windows container version compatibility
      # https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility?tabs=windows-server-2022%2Cwindows-10-21H1
    - name: "docker run"
      run: |
        Start-Service Docker
        docker info
        Get-Process 'com.docker.proxy'
        docker version
        docker --version
        docker ps
        wsl -l -v

  # windows-2019: 
  #   name: "Microsoft Windows Server 2019 Datacenter"
  #   runs-on: windows-2019
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query 

  # windows-2019-shells: 
  #   name: "Microsoft Windows Server 2019 Datacenter shells"
  #   runs-on: windows-2019
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query 
  #   - name: "Display the path" #Example running a script using bash
  #     run: echo $PATH
  #     shell: bash      
  #   - name: "Display the path" #Example running a script using Windows cmd
  #     run: echo %PATH%
  #     shell: cmd     
  #   - name: "Display the path" #Example running a script using PowerShell Core
  #     run: echo ${env:PATH}
  #     shell: pwsh  
  #   - name: "Display the path" #Example running a python script
  #     run: |
  #         import os
  #         print(os.environ['PATH'])
  #     shell: python  

  # windows-2016:
  #   name: "Microsoft Windows Server 2016 Datacenter"
  #   runs-on: windows-2016
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query      

  # windows-2016-shells:
  #   name: "Microsoft Windows Server 2016 Datacenter shells"
  #   runs-on: windows-2016
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query  
  #   - name: "Display the path" #Example running a script using bash
  #     run: echo $PATH
  #     shell: bash      
  #   - name: "Display the path" #Example running a script using Windows cmd
  #     run: echo %PATH%
  #     shell: cmd     
  #   - name: "Display the path" #Example running a script using PowerShell Core
  #     run: echo ${env:PATH}
  #     shell: pwsh  
  #   - name: "Display the path" #Example running a python script
  #     run: |
  #         import os
  #         print(os.environ['PATH'])
  #     shell: python       