
name: "docker CI workflow"

on:
  push:
    branches: [ test ]



jobs:
         
  windows-2022:
    name: "windows 2022"  
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: "check if server is virtual"
      run: Systeminfo | findstr /i model   
    - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
      run: wmic OS get OSArchitecture     
    - name: "osfingerprinting"
      run: systeminfo | more  
    - name: "display all processes, executable path"
      run: wmic process list full         
    - name: "list of running services"
      run: tasklist         
    - name: "list of all processes along with their corresponding PID, and services that are tied to them"
      run: tasklist /svc  
    - name: "look for unusual services"
      run: net start                       
    - name: "query unusual services"
      run: sc query  
      # https://hub.docker.com/_/microsoft-windows-base-os-images
      # Windows container version compatibility
      # https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility?tabs=windows-server-2022%2Cwindows-10-21H1
    - name: "docker info"
      run: |
        docker info
        docker version
        docker --version
        docker ps
    - name: "Deploy a Test Container"
      run: |
        Get-WindowsFeature -Name Containers
        docker pull mcr.microsoft.com/windows/nanoserver:ltsc2022
        docker images   
# 12-alpine: Pulling from library/node
# no matching manifest for windows/amd64 10.0.17763 in the manifest list entries             
    - name: "build docker compose"
      run: |
        docker-compose version
        docker-compose up -d
        docker-compose images
        docker-compose ps
        docker-compose down

  windows-latest:
    name: "windows-latest"  
    runs-on: windows-latest
    env:
      distribution: "scientificlinux" # https://hub.docker.com/_/sl
      version: "latest"
      name: "servercore/base"
      # dockerfilename: "Dockerfile.iis"    
      dockerfilename: "Dockerfile.servercore.2019"    
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: "check if server is virtual"
      run: Systeminfo | findstr /i model   
    - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
      run: wmic OS get OSArchitecture     
    - name: "osfingerprinting"
      run: systeminfo | more  
    - name: "display all processes, executable path"
      run: wmic process list full         
    - name: "list of running services"
      run: tasklist         
    - name: "list of all processes along with their corresponding PID, and services that are tied to them"
      run: tasklist /svc  
    - name: "look for unusual services"
      run: net start                       
    - name: "query unusual services"
      run: sc query  
      # https://hub.docker.com/_/microsoft-windows-base-os-images
      # Windows container version compatibility
      # https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility?tabs=windows-server-2022%2Cwindows-10-21H1
    - name: "docker info"
      run: |
        # docker info
        # docker version
        docker --version
        # docker ps
    - name: "Deploy a Test Container"
      run: |
        Get-WindowsFeature -Name Containers
        docker run --name dock2019 mcr.microsoft.com/windows/nanoserver:1809
        docker images
        # docker run microsoft/dotnet-samples:dotnetapp-nanoserver-1809
    - name: "build docker image"
      run: |
        # echo $env:dockerfilename 
        # echo $env:name     
        docker build --no-cache --rm  -t $env:name/$env:version  . --file dockerfiles/$env:dockerfilename
        docker image ls
        # docker image history ${name}/${version}
        # docker system df -v               
        # # docker image inspect ${name}/${version}
    - name: "build docker dotnet image"
      run: |  
        docker build --no-cache --rm  -t dotnet/base/latest  . --file dockerfiles/Dockerfile.dotnet
        docker image ls       
    - name: "build docker node image"
      run: |  
        docker build --no-cache --rm  -t dotnet/base/latest  . --file dockerfiles/Dockerfile.node.alpine
        docker image ls           
# 12-alpine: Pulling from library/node
# no matching manifest for windows/amd64 10.0.17763 in the manifest list entries        
# https://hub.docker.com/_/node/
    - name: "build docker compose"
      run: |
        docker-compose version
        docker-compose up -d
        docker-compose images
        docker-compose ps
        docker-compose down              
    # - name: "build docker composetest"
    #   run: |
    #     # mkdir composetest && cd composetest     
    #     cd composetest && docker-compose up
    # - name: "build docker image"
    #   run: |        
    #     docker-compose --version
    #     docker-compose images
    #     docker-compose -f docker-compose-iis.yml up -d appsrv
    #     docker-compose ps
    #     docker-compose images
    #     docker-compose stop
    #     docker-compose run appsrv
    #     docker-compose down

  # windows-2019: 
  #   name: "Microsoft Windows Server 2019 Datacenter"
  #   runs-on: windows-2019
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query 

  # windows-2019-shells: 
  #   name: "Microsoft Windows Server 2019 Datacenter shells"
  #   runs-on: windows-2019
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query 
  #   - name: "Display the path" #Example running a script using bash
  #     run: echo $PATH
  #     shell: bash      
  #   - name: "Display the path" #Example running a script using Windows cmd
  #     run: echo %PATH%
  #     shell: cmd     
  #   - name: "Display the path" #Example running a script using PowerShell Core
  #     run: echo ${env:PATH}
  #     shell: pwsh  
  #   - name: "Display the path" #Example running a python script
  #     run: |
  #         import os
  #         print(os.environ['PATH'])
  #     shell: python  

  # windows-2016:
  #   name: "Microsoft Windows Server 2016 Datacenter"
  #   runs-on: windows-2016
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query      

  # windows-2016-shells:
  #   name: "Microsoft Windows Server 2016 Datacenter shells"
  #   runs-on: windows-2016
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query  
  #   - name: "Display the path" #Example running a script using bash
  #     run: echo $PATH
  #     shell: bash      
  #   - name: "Display the path" #Example running a script using Windows cmd
  #     run: echo %PATH%
  #     shell: cmd     
  #   - name: "Display the path" #Example running a script using PowerShell Core
  #     run: echo ${env:PATH}
  #     shell: pwsh  
  #   - name: "Display the path" #Example running a python script
  #     run: |
  #         import os
  #         print(os.environ['PATH'])
  #     shell: python       