
name: "Nodejs CI workflow"

on:
  push:
    branches: [ feature_githubactions ]
  # pull_request:
  #   branches: [ githubactions_powershell ]


jobs:

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
  ubuntu-latest-nodejs-pnm-job:
    name: "Installing dependencies Example using npm ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: "Install dependencies"
      run: npm install    
    # - run: npm run build --if-present
    # - run: npm test
      env:
        CI: true

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
  ubuntu-latest-nodejs-ci-job:
    name: "Installing dependencies Example using npm ci ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
  # Using npm ci installs the versions in the package-lock.json or npm-shrinkwrap.json file 
  # and prevents updates to the lock file. Using npm ci is generally faster than running npm install      
    - name: "Install dependencies"
      run: npm ci      
    # - run: npm run build --if-present
    # - run: npm test
      env:
        CI: true


# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
  ubuntu-latest-nodejs-yarn-job:
    name: "Installing dependencies Example using yarn ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: "Install dependencies"
      run: yarn    
    # pass --frozen-lockfile to install the versions in the yarn.lock file and prevent updates to the yarn.lock file.      
    - name: "Install dependencies --frozen-lockfile"
      run: yarn --frozen-lockfile       
    # - run: npm run build --if-present
    # - run: npm test
      env:
        CI: true

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
  ubuntu-latest-nodejs-caching-job:
    name: "Example caching dependencies ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: "Cache Node.js modules"
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-     
  # Using npm ci installs the versions in the package-lock.json or npm-shrinkwrap.json file 
  # and prevents updates to the lock file. Using npm ci is generally faster than running npm install      
    - name: "Install dependencies"
      run: npm ci      
    # - run: npm run build --if-present
    # - run: npm test
      env:
        CI: true


# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
  ubuntu-latest-nodejs-matrix-job:
    name: "nodejs matrix ubuntu-18.04"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]
        # node-version: [8.16.2, 10.17.0] #with exact Node.js versions
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: "os fingerprinting"
      run: hostnamectl status  
    - name: "npm install"                
      run: npm install
    # - run: npm run build --if-present #npm ERR! enoent This is related to npm not being able to find a file.
    # - run: npm test
      env:
        CI: true

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
  windows-latest-nodejs-matrix-job:
    name: "nodejs matrix Microsoft Windows Server 2019 Datacenter"
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: "osfingerprinting"
      run: systeminfo | more
    - name: "npm install"                
      run: npm install
    # - run: npm run build --if-present #npm ERR! enoent This is related to npm not being able to find a file.
    # - run: npm test
      env:
        CI: true



# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
  macos-latest-nodejs-matrix-job:
    name: "nodejs matrix macos-latest 10.15.7"
    runs-on: macos-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: "Get OS X System Version"
      run: sw_vers  
    - name: "npm install"                
      run: npm install
    # - run: npm run build --if-present #npm ERR! enoent This is related to npm not being able to find a file.
    # - run: npm test
      env:
        CI: true
