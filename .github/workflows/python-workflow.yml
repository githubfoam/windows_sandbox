name: "python app CI workflow"


on:
  push:
    branches: [ feature_githubactions ]
  # pull_request:
  #   branches: [ githubactions_powershell ]


jobs:

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
  build-python-package:
    name: "Python package"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"        
    - name: "Install dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: "Lint with flake8"
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: "Test with pytest"
      run: |
        pytest

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
  build-python-multiple-versions:
    name: "Using multiple Python versions ubuntu-18.04"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"        

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
  build-python-multiple-versions-ubuntu-2004:
    name: "Using multiple Python versions ubuntu-20.04"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"   

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-specific-version:
    name: "Using a specific Python version ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python 3.x"
      uses: actions/setup-python@v2
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: '3.x'
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: 'x64'
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-os-matrix:
    name: "OS matrix excluding a version"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [2.7, 3.6, 3.7, 3.8, pypy2, pypy3]
        exclude:
          - os: macos-latest
            python-version: 3.6
          - os: windows-latest
            python-version: 3.6
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  python-installing-dependencies:
    name: "Installing dependencies ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python 3.x"
      uses: actions/setup-python@v2
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: '3.x'
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: 'x64'
    - name: "Cache pip Caching Dependencies"
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-        
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"
    - name: "Install dependencies"
      run: python -m pip install --upgrade pip setuptools wheel
    - name: "Install dependencies Requirements file"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt 
    - name: "Using Flake8 to lint code"
      run: |
        pip install flake8
        flake8 .         
    - name: "Testing with pytest and pytest-cov"
      run: |
        pip install pytest
        pip install pytest-cov
        pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html            

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-tox:
    name: "Running tests with tox"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [2.7, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: "Install Tox and any other packages"
        run: pip install tox
      - name: "Run Tox"
        # Run tox using the version of Python in `PATH`
        run: tox -e py

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-artifacts:
    name: "Running tests with tox"
    runs-on: ubuntu-latest
    strategy:
        matrix:
          python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
        - uses: actions/checkout@v2
        - name: Setup Python # Set Python version
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        # Install pip and pytest
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pytest
        - name: Test with pytest
          run: pytest tests.py --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
        - name: Upload pytest test results
          uses: actions/upload-artifact@v2
          with:
            name: pytest-results-${{ matrix.python-version }}
            path: junit/test-results-${{ matrix.python-version }}.xml
          # Use always() to always run this step to publish test results when there are test failures
          if: ${{ always() }}